#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <iomanip>
#include <ctime>
#include <random>
#include "common.h"

using namespace std;

// Utility functions
vector<Registration> loadRegistrationsFromFile() {
    vector<Registration> registrations;
    ifstream file("registrations.txt");
    
    if (!file.is_open()) {
        return registrations;
    }
    
    string line;
    while (getline(file, line)) {
        if (line.empty()) continue;
        
        stringstream ss(line);
        Registration reg;
        string temp;
        
        getline(ss, reg.registrationID, ',');
        getline(ss, reg.participantName, ',');
        getline(ss, reg.participantID, ',');
        getline(ss, reg.companyName, ',');
        getline(ss, reg.phoneNumber, ',');
        getline(ss, temp, ',');
        reg.eventID = stoi(temp);
        getline(ss, reg.eventName, ',');
        getline(ss, reg.eventDate, ',');
        getline(ss, reg.eventVenue);
        
        registrations.push_back(reg);
    }
    file.close();
    return registrations;
}

vector<Event> loadEventsFromFile() {
    vector<Event> events;
    ifstream file("events.txt");
    
    if (!file.is_open()) {
        events.push_back({1, "Team Building Workshop", "2025-09-15", "Conference Room A", "Projector, Whiteboard", 75.0, 4, 300.0});
        events.push_back({2, "Leadership Training", "2025-09-20", "Training Hall B", "Microphone, Laptop", 100.0, 6, 600.0});
        events.push_back({3, "Communication Skills", "2025-09-25", "Seminar Room C", "Flipchart, Markers", 60.0, 3, 180.0});
        events.push_back({4, "Problem Solving Session", "2025-10-01", "Workshop Room D", "Sticky Notes, Timer", 80.0, 4, 320.0});
        events.push_back({5, "Networking Event", "2025-10-05", "Main Hall", "Sound System, Refreshments", 50.0, 2, 100.0});
        return events;
    }
    
    string line;
    while (getline(file, line)) {
        if (line.empty()) continue;
        
        stringstream ss(line);
        Event event;
        string temp;
        
        getline(ss, temp, ',');
        event.eventID = stoi(temp);
        getline(ss, event.eventName, ',');
        getline(ss, event.eventDate, ',');
        getline(ss, event.eventVenue, ',');
        getline(ss, event.requiredEquipment);
        
        if (event.eventName.find("Leadership") != string::npos) {
            event.pricePerHour = 100.0;
            event.durationHours = 6;
        } else if (event.eventName.find("Team Building") != string::npos) {
            event.pricePerHour = 75.0;
            event.durationHours = 4;
        } else if (event.eventName.find("Communication") != string::npos) {
            event.pricePerHour = 60.0;
            event.durationHours = 3;
        } else if (event.eventName.find("Problem Solving") != string::npos) {
            event.pricePerHour = 80.0;
            event.durationHours = 4;
        } else if (event.eventName.find("Networking") != string::npos) {
            event.pricePerHour = 50.0;
            event.durationHours = 2;
        } else {
            event.pricePerHour = 70.0;
            event.durationHours = 4;
        }
        
        event.totalPrice = event.pricePerHour * event.durationHours;
        events.push_back(event);
    }
    file.close();
    return events;
}

vector<Registration> getRegistrationsByParticipantName(const string& participantName) {
    vector<Registration> allRegistrations = loadRegistrationsFromFile();
    vector<Registration> userRegistrations;
    
    for (const auto& reg : allRegistrations) {
        if (reg.participantName == participantName) {
            userRegistrations.push_back(reg);
        }
    }
    
    return userRegistrations;
}

Event getEventByID(int eventID, const vector<Event>& events) {
    for (const auto& event : events) {
        if (event.eventID == eventID) {
            return event;
        }
    }
    // Return a properly initialized empty event to avoid access violations
    Event emptyEvent;
    emptyEvent.eventID = 0;
    emptyEvent.eventName = "";
    emptyEvent.eventDate = "";
    emptyEvent.eventVenue = "";
    emptyEvent.requiredEquipment = "";
    emptyEvent.pricePerHour = 0.0;
    emptyEvent.durationHours = 0;
    emptyEvent.totalPrice = 0.0;
    return emptyEvent;
}

class IntegratedPaymentSystem {
private:
    vector<Payment> payments;
    vector<Registration> registrations;
    vector<Event> events;
    static int nextPaymentID;
    
    // Helper functions
    string generateReceiptID();
    string getCurrentDateTime();
    string maskCardNumber(const string& cardNumber);
    bool validateCardNumber(const string& cardNumber);
    bool validateTnGWallet(const string& walletID);
    void savePaymentToFile(const Payment& payment);
    
public:
    // Constructor
    IntegratedPaymentSystem();
    
    // Main payment functions
    void displayUserRegistrations(const string& participantName);
    Registration selectRegistrationForPayment(const string& participantName);
    void displayPaymentSummary(const Registration& registration, const Event& event);
    int paymentMethod();
    bool processPayment(const Registration& registration, const Event& event, int method);
    string generateReceipt(const Payment& payment);
    
    // File operations
    void loadPayments();
    void savePayments();
    void loadData();
    
    // Validation functions
    bool validateCreditCard(const string& cardNumber, const string& expiryDate, const string& cvv);
    bool validateTnGEWallet(const string& walletID, const string& pin);
    
    // Display functions
    void displayPaymentHistory(const string& participantName = "");
    void displayAllPayments();
    
    // Utility functions
    Payment createPaymentRecord(const Registration& registration, const Event& event, int method, const string& paymentDetails);
    bool isValidAmount(double amount);
    bool hasUnpaidRegistrations(const string& participantName);
    bool isRegistrationPaid(const string& registrationID);
};

// Initialize static member
int IntegratedPaymentSystem::nextPaymentID = 1;

// Constructor
IntegratedPaymentSystem::IntegratedPaymentSystem() {
    loadData();
    loadPayments();
}

// Load all data from files
void IntegratedPaymentSystem::loadData() {
    registrations = loadRegistrationsFromFile();
    events = loadEventsFromFile();
}

// Display user's registrations
void IntegratedPaymentSystem::displayUserRegistrations(const string& participantName) {
    vector<Registration> userRegs = getRegistrationsByParticipantName(participantName);
    
    if (userRegs.empty()) {
        cout << "No registrations found for: " << participantName << "\n";
        return;
    }
    
    cout << "\n" << string(80, '=') << "\n";
    cout << "           YOUR REGISTERED EVENTS\n";
    cout << string(80, '=') << "\n";
    cout << left << setw(5) << "No." << setw(15) << "Reg ID" 
         << setw(25) << "Event Name" << setw(15) << "Date"
         << setw(20) << "Venue" << setw(12) << "Status" << "\n";
    cout << string(80, '-') << "\n";
    
    for (size_t i = 0; i < userRegs.size(); i++) {
        string status = isRegistrationPaid(userRegs[i].registrationID) ? "PAID" : "UNPAID";
        
        cout << left << setw(5) << (i + 1)
             << setw(15) << userRegs[i].registrationID
             << setw(25) << userRegs[i].eventName
             << setw(15) << userRegs[i].eventDate
             << setw(20) << userRegs[i].eventVenue
             << setw(12) << status << "\n";
    }
    cout << string(80, '=') << "\n";
}

// Select registration for payment
Registration IntegratedPaymentSystem::selectRegistrationForPayment(const string& participantName) {
    vector<Registration> userRegs = getRegistrationsByParticipantName(participantName);
    vector<Registration> unpaidRegs;
    
    // Filter unpaid registrations
    for (const auto& reg : userRegs) {
        if (!isRegistrationPaid(reg.registrationID)) {
            unpaidRegs.push_back(reg);
        }
    }
    
    if (unpaidRegs.empty()) {
        cout << "All your registrations are already paid!\n";
        return Registration{"", "", "", "", "", 0, "", "", ""}; // Return empty registration
    }
    
    cout << "\nSelect registration to pay for:\n";
    for (size_t i = 0; i < unpaidRegs.size(); i++) {
        Event event = getEventByID(unpaidRegs[i].eventID, events);
        cout << (i + 1) << ". " << unpaidRegs[i].eventName 
             << " - RM " << fixed << setprecision(2) << event.totalPrice << "\n";
    }
    
    int choice;
    do {
        cout << "Enter choice (1-" << unpaidRegs.size() << "): ";
        cin >> choice;
        cin.ignore();
        
        if (choice < 1 || choice > static_cast<int>(unpaidRegs.size())) {
            cout << "Invalid choice! Please try again.\n";
        }
    } while (choice < 1 || choice > static_cast<int>(unpaidRegs.size()));
    
    return unpaidRegs[choice - 1];
}

// Display payment summary
void IntegratedPaymentSystem::displayPaymentSummary(const Registration& registration, const Event& event) {
    cout << "\n" << string(60, '=') << "\n";
    cout << "           PAYMENT SUMMARY\n";
    cout << string(60, '=') << "\n";
    cout << "Registration ID: " << registration.registrationID << "\n";
    cout << "Participant: " << registration.participantName << "\n";
    cout << "Participant ID: " << registration.participantID << "\n";
    cout << "Event: " << event.eventName << "\n";
    cout << "Date: " << event.eventDate << "\n";
    cout << "Venue: " << event.eventVenue << "\n";
    cout << "Duration: " << event.durationHours << " hours\n";
    cout << string(60, '-') << "\n";
    cout << "Rate per Hour: RM " << fixed << setprecision(2) << event.pricePerHour << "\n";
    cout << "Total Duration: " << event.durationHours << " hours\n";
    cout << string(60, '-') << "\n";
    cout << "TOTAL AMOUNT: RM " << fixed << setprecision(2) << event.totalPrice << "\n";
    cout << string(60, '=') << "\n";
}

// Payment method selection
int IntegratedPaymentSystem::paymentMethod() {
    int choice;
    
    cout << "\n" << string(50, '=') << "\n";
    cout << "         PAYMENT METHODS\n";
    cout << string(50, '=') << "\n";
    cout << "1. Credit/Debit Card\n";
    cout << "2. TnG E-Wallet\n";
    cout << "3. Cancel Payment\n";
    cout << string(50, '-') << "\n";
    
    do {
        cout << "Select payment method (1-3): ";
        cin >> choice;
        cin.ignore();
        
        if (choice < 1 || choice > 3) {
            cout << "Invalid choice! Please select 1, 2, or 3.\n";
        }
    } while (choice < 1 || choice > 3);
    
    return choice;
}

// Process payment based on selected method
bool IntegratedPaymentSystem::processPayment(const Registration& registration, const Event& event, int method) {
    string paymentDetails = "";
    
    switch (method) {
        case 1: { // Credit/Debit Card
            cout << "\n=== CREDIT/DEBIT CARD PAYMENT ===\n";
            
            string cardNumber, expiryDate, cvv, cardholderName;
            
            // Get card details with validation
            do {
                cout << "Enter Card Number (16 digits): ";
                getline(cin, cardNumber);
                
                if (!validateCardNumber(cardNumber)) {
                    cout << "Error: Card number must be exactly 16 digits!\n";
                }
            } while (!validateCardNumber(cardNumber));
            
            cout << "Enter Cardholder Name: ";
            getline(cin, cardholderName);
            
            do {
                cout << "Enter Expiry Date (MM/YY): ";
                getline(cin, expiryDate);
                
                if (expiryDate.length() != 5 || expiryDate[2] != '/') {
                    cout << "Error: Please enter date in MM/YY format!\n";
                    continue;
                }
                break;
            } while (true);
            
            do {
                cout << "Enter CVV (3 digits): ";
                getline(cin, cvv);
                
                if (cvv.length() != 3 || !all_of(cvv.begin(), cvv.end(), ::isdigit)) {
                    cout << "Error: CVV must be exactly 3 digits!\n";
                }
            } while (cvv.length() != 3 || !all_of(cvv.begin(), cvv.end(), ::isdigit));
            
            if (validateCreditCard(cardNumber, expiryDate, cvv)) {
                paymentDetails = maskCardNumber(cardNumber);
                cout << "\nProcessing payment...\n";
                cout << "Payment successful!\n";
                
                // Create and save payment record
                Payment payment = createPaymentRecord(registration, event, method, paymentDetails);
                payments.push_back(payment);
                savePaymentToFile(payment);
                
                // Display receipt
                cout << generateReceipt(payment);
                return true;
            } else {
                cout << "Payment failed! Invalid card details.\n";
                return false;
            }
        }
        
        case 2: { // TnG E-Wallet
            cout << "\n=== TNG E-WALLET PAYMENT ===\n";
            
            string walletID, pin;
            
            do {
                cout << "Enter TnG Wallet ID (10 digits): ";
                getline(cin, walletID);
                
                if (!validateTnGWallet(walletID)) {
                    cout << "Error: Wallet ID must be exactly 10 digits!\n";
                }
            } while (!validateTnGWallet(walletID));
            
            do {
                cout << "Enter 6-digit PIN: ";
                getline(cin, pin);
                
                if (pin.length() != 6 || !all_of(pin.begin(), pin.end(), ::isdigit)) {
                    cout << "Error: PIN must be exactly 6 digits!\n";
                }
            } while (pin.length() != 6 || !all_of(pin.begin(), pin.end(), ::isdigit));
            
            if (validateTnGEWallet(walletID, pin)) {
                paymentDetails = "TnG-" + walletID;
                cout << "\nProcessing payment...\n";
                cout << "Payment successful!\n";
                
                // Create and save payment record
                Payment payment = createPaymentRecord(registration, event, method, paymentDetails);
                payments.push_back(payment);
                savePaymentToFile(payment);
                
                // Display receipt
                cout << generateReceipt(payment);
                return true;
            } else {
                cout << "Payment failed! Invalid wallet credentials.\n";
                return false;
            }
        }
        
        case 3: // Cancel
            cout << "Payment cancelled.\n";
            return false;
            
        default:
            cout << "Invalid payment method!\n";
            return false;
    }
}

// Generate and display receipt
string IntegratedPaymentSystem::generateReceipt(const Payment& payment) {
    stringstream receiptStream;
    
    receiptStream << "\n" << string(50, '=') << "\n";
    receiptStream << "              PAYMENT RECEIPT\n";
    receiptStream << string(50, '=') << "\n";
    receiptStream << "Receipt ID: " << payment.receiptID << "\n";
    receiptStream << "Date/Time: " << payment.paymentDate << "\n";
    receiptStream << string(50, '-') << "\n";
    receiptStream << "Participant: " << payment.participantName << "\n";
    receiptStream << "Participant ID: " << payment.participantID << "\n";
    receiptStream << "Registration ID: " << payment.registrationID << "\n";
    receiptStream << "Event: " << payment.eventName << "\n";
    receiptStream << "Event Date: " << payment.eventDate << "\n";
    receiptStream << "Event Venue: " << payment.eventVenue << "\n";
    receiptStream << "Payment Method: " << payment.paymentMethod << "\n";
    
    if (payment.paymentMethod == "Credit/Debit Card") {
        receiptStream << "Card: " << payment.cardNumber << "\n";
    } else if (payment.paymentMethod == "TnG E-Wallet") {
        receiptStream << "Wallet: " << payment.walletID << "\n";
    }
    
    receiptStream << string(50, '-') << "\n";
    receiptStream << "Amount Paid: RM " << fixed << setprecision(2) << payment.paymentAmount << "\n";
    receiptStream << string(50, '=') << "\n";
    receiptStream << "Thank you for your payment!\n";
    receiptStream << "Keep this receipt for your records.\n";
    receiptStream << string(50, '=') << "\n";
    
    return receiptStream.str();
}

// Load payments from file
void IntegratedPaymentSystem::loadPayments() {
    ifstream file("payments.txt");
    payments.clear();
    nextPaymentID = 1;
    
    if (!file.is_open()) {
        return; // File doesn't exist yet
    }
    
    string line;
    while (getline(file, line)) {
        if (line.empty()) continue;
        
        stringstream ss(line);
        Payment payment;
        string temp;
        
        getline(ss, temp, ',');
        payment.userID = stoi(temp);
        getline(ss, payment.registrationID, ',');
        getline(ss, payment.paymentMethod, ',');
        getline(ss, temp, ',');
        payment.paymentAmount = stod(temp);
        getline(ss, payment.paymentDate, ',');
        getline(ss, payment.receiptID, ',');
        getline(ss, payment.eventName, ',');
        getline(ss, payment.participantName, ',');
        getline(ss, payment.participantID, ',');
        getline(ss, payment.eventDate, ',');
        getline(ss, payment.eventVenue, ',');
        getline(ss, payment.cardNumber, ',');
        getline(ss, payment.walletID);
        
        payments.push_back(payment);
        
        if (payment.userID >= nextPaymentID) {
            nextPaymentID = payment.userID + 1;
        }
    }
    file.close();
}

// Save all payments to file
void IntegratedPaymentSystem::savePayments() {
    ofstream file("payments.txt");
    
    if (!file.is_open()) {
        cout << "Error: Unable to save payments to file!\n";
        return;
    }
    
    for (const auto& payment : payments) {
        file << payment.userID << ","
             << payment.registrationID << ","
             << payment.paymentMethod << ","
             << payment.paymentAmount << ","
             << payment.paymentDate << ","
             << payment.receiptID << ","
             << payment.eventName << ","
             << payment.participantName << ","
             << payment.participantID << ","
             << payment.eventDate << ","
             << payment.eventVenue << ","
             << payment.cardNumber << ","
             << payment.walletID << "\n";
    }
    file.close();
}

// Save single payment to file (append)
void IntegratedPaymentSystem::savePaymentToFile(const Payment& payment) {
    ofstream file("payments.txt", ios::app);
    
    if (!file.is_open()) {
        cout << "Error: Unable to save payment to file!\n";
        return;
    }
    
    file << payment.userID << ","
         << payment.registrationID << ","
         << payment.paymentMethod << ","
         << payment.paymentAmount << ","
         << payment.paymentDate << ","
         << payment.receiptID << ","
         << payment.eventName << ","
         << payment.participantName << ","
         << payment.participantID << ","
         << payment.eventDate << ","
         << payment.eventVenue << ","
         << payment.cardNumber << ","
         << payment.walletID << "\n";
    
    file.close();
}

// Validate credit card number (16 digits)
bool IntegratedPaymentSystem::validateCardNumber(const string& cardNumber) {
    if (cardNumber.length() != 16) {
        return false;
    }
    
    for (char c : cardNumber) {
        if (!isdigit(c)) {
            return false;
        }
    }
    return true;
}

// Validate TnG wallet ID (10 digits)
bool IntegratedPaymentSystem::validateTnGWallet(const string& walletID) {
    if (walletID.length() != 10) {
        return false;
    }
    
    for (char c : walletID) {
        if (!isdigit(c)) {
            return false;
        }
    }
    return true;
}

// Validate credit card details
bool IntegratedPaymentSystem::validateCreditCard(const string& cardNumber, const string& expiryDate, const string& cvv) {
    // Basic validation - in real system would check with payment gateway
    return validateCardNumber(cardNumber) && 
           expiryDate.length() == 5 && 
           cvv.length() == 3;
}

// Validate TnG e-wallet credentials
bool IntegratedPaymentSystem::validateTnGEWallet(const string& walletID, const string& pin) {
    // Basic validation - in real system would check with TnG API
    return validateTnGWallet(walletID) && pin.length() == 6;
}

// Generate unique receipt ID
string IntegratedPaymentSystem::generateReceiptID() {
    static random_device rd;
    static mt19937 gen(rd());
    static uniform_int_distribution<> dis(100000, 999999);
    
    return "RCP" + to_string(dis(gen));
}

// Get current date and time
string IntegratedPaymentSystem::getCurrentDateTime() {
    time_t now = time(0);
    char dt[26];
    ctime_s(dt, sizeof(dt), &now);
    string dateTime(dt);
    dateTime.pop_back(); // Remove newline character
    return dateTime;
}

// Mask card number for security
string IntegratedPaymentSystem::maskCardNumber(const string& cardNumber) {
    if (cardNumber.length() != 16) {
        return cardNumber;
    }
    
    return "**** **** **** " + cardNumber.substr(12, 4);
}

// Create payment record
Payment IntegratedPaymentSystem::createPaymentRecord(const Registration& registration, const Event& event, int method, const string& paymentDetails) {
    Payment payment;
    payment.userID = nextPaymentID++;
    payment.registrationID = registration.registrationID;
    payment.paymentAmount = event.totalPrice;
    payment.paymentDate = getCurrentDateTime();
    payment.receiptID = generateReceiptID();
    payment.eventName = event.eventName;
    payment.participantName = registration.participantName;
    payment.participantID = registration.participantID;
    payment.eventDate = event.eventDate;
    payment.eventVenue = event.eventVenue;
    
    if (method == 1) { // Credit/Debit Card
        payment.paymentMethod = "Credit/Debit Card";
        payment.cardNumber = paymentDetails;
        payment.walletID = "";
    } else if (method == 2) { // TnG E-Wallet
        payment.paymentMethod = "TnG E-Wallet";
        payment.cardNumber = "";
        payment.walletID = paymentDetails;
    }
    
    return payment;
}

// Check if registration is already paid
bool IntegratedPaymentSystem::isRegistrationPaid(const string& registrationID) {
    for (const auto& payment : payments) {
        if (payment.registrationID == registrationID) {
            return true;
        }
    }
    return false;
}

// Check if user has unpaid registrations
bool IntegratedPaymentSystem::hasUnpaidRegistrations(const string& participantName) {
    vector<Registration> userRegs = getRegistrationsByParticipantName(participantName);
    
    for (const auto& reg : userRegs) {
        if (!isRegistrationPaid(reg.registrationID)) {
            return true;
        }
    }
    return false;
}

// Display payment history for specific participant
void IntegratedPaymentSystem::displayPaymentHistory(const string& participantName) {
    vector<Payment> userPayments;
    
    if (participantName.empty()) {
        userPayments = payments;
    } else {
        for (const auto& payment : payments) {
            if (payment.participantName == participantName) {
                userPayments.push_back(payment);
            }
        }
    }
    
    if (userPayments.empty()) {
        cout << "No payment records found.\n";
        return;
    }
    
    cout << "\n=== PAYMENT HISTORY ===\n";
    cout << left << setw(8) << "ID" << setw(15) << "Participant"
         << setw(20) << "Event" << setw(15) << "Method"
         << setw(10) << "Amount" << setw(12) << "Receipt"
         << "Date\n";
    cout << string(100, '-') << "\n";
    
    for (const auto& payment : userPayments) {
        cout << left << setw(8) << payment.userID
             << setw(15) << payment.participantName
             << setw(20) << payment.eventName
             << setw(15) << payment.paymentMethod
             << setw(10) << fixed << setprecision(2) << payment.paymentAmount
             << setw(12) << payment.receiptID
             << payment.paymentDate << "\n";
    }
}

// Display all payments (admin function)
void IntegratedPaymentSystem::displayAllPayments() {
    displayPaymentHistory("");
}

// Validate amount
bool IntegratedPaymentSystem::isValidAmount(double amount) {
    return amount > 0.0;
}

// Integrated payment system main function
int paymentMain() {
    IntegratedPaymentSystem paymentSystem;
    int choice;
    
    do {
        cout << "\n" << string(60, '=') << "\n";
        cout << "         INTEGRATED PAYMENT SYSTEM\n";
        cout << string(60, '=') << "\n";
        cout << "1. Make Payment for Registered Event\n";
        cout << "2. View My Payment History\n";
        cout << "3. View All Payments (Admin)\n";
        cout << "4. Return to Main Menu\n";
        cout << string(60, '-') << "\n";
        cout << "Enter choice: ";
        cin >> choice;
        cin.ignore();
        
        switch (choice) {
            case 1: {
                cout << "\n=== MAKE PAYMENT ===\n";
                
                string participantName;
                cout << "Enter your name: ";
                getline(cin, participantName);
                
                // Display user's registrations
                paymentSystem.displayUserRegistrations(participantName);
                
                // Check if user has unpaid registrations
                if (!paymentSystem.hasUnpaidRegistrations(participantName)) {
                    cout << "All your registrations are already paid!\n";
                    break;
                }
                
                // Select registration for payment
                Registration selectedReg = paymentSystem.selectRegistrationForPayment(participantName);
                
                if (selectedReg.registrationID.empty()) {
                    break; // No valid registration selected
                }
                
                // Get event details
                vector<Event> events = loadEventsFromFile();
                Event selectedEvent = getEventByID(selectedReg.eventID, events);
                
                if (selectedEvent.eventID == 0) {
                    cout << "Error: Event details not found!\n";
                    break;
                }
                
                // Display payment summary
                paymentSystem.displayPaymentSummary(selectedReg, selectedEvent);
                
                // Get payment method
                int method = paymentSystem.paymentMethod();
                
                if (method != 3) {
                    bool success = paymentSystem.processPayment(selectedReg, selectedEvent, method);
                    if (success) {
                        cout << "\nPayment completed successfully!\n";
                        cout << "Your registration is now fully paid.\n";
                    } else {
                        cout << "\nPayment failed! Please try again.\n";
                    }
                }
                break;
            }
            case 2: {
                string name;
                cout << "Enter your name (or press Enter for all): ";
                getline(cin, name);
                paymentSystem.displayPaymentHistory(name);
                break;
            }
            case 3:
                paymentSystem.displayAllPayments();
                break;
            case 4:
                cout << "Returning to main menu...\n";
                break;
            default:
                cout << "Invalid choice! Please try again.\n";
        }
        
        if (choice != 4) {
            cout << "\nPress Enter to continue...";
            cin.get();
        }
        
    } while (choice != 4);
    
    return 0;
}

// Function for immediate payment after registration
void processImmediatePayment(const Registration& registration) {
    IntegratedPaymentSystem paymentSystem;
    
    // Get event details
    vector<Event> events = loadEventsFromFile();
    Event selectedEvent = getEventByID(registration.eventID, events);
    
    if (selectedEvent.eventID == 0) {
        cout << "Error: Event details not found!\n";
        return;
    }
    
    // Display payment summary
    paymentSystem.displayPaymentSummary(registration, selectedEvent);
    
    // Get payment method
    int method = paymentSystem.paymentMethod();
    
    if (method != 3) {
        bool success = paymentSystem.processPayment(registration, selectedEvent, method);
        if (success) {
            cout << "\nPayment completed successfully!\n";
            cout << "Your registration is now fully paid.\n";
        } else {
            cout << "\nPayment failed! You can try again later through the Payment System menu.\n";
        }
    } else {
        cout << "\nPayment cancelled. You can make payment later through the Payment System menu.\n";
        cout << "Remember your Registration ID: " << registration.registrationID << "\n";
    }
}
