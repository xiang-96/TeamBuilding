#include <iostream>
#include <string>
#include <vector>
#include <iomanip>
#include <limits>
#include <regex>
#include <fstream>
#include <sstream>

using namespace std;

struct Event {
    int eventID;
    string name;
    string date;
    string venue;
    vector<string> equipment;
};

struct Participant {
    int participantID;
    string name;
    int eventID;
    string status; // Present / Absent
};

struct SystemData {
    vector<Event> events;
    vector<Participant> participants;
    int nextEventID = 1;
    int nextParticipantID = 1;

    int attendance[100][100] = { 0 };
};

bool isValidDate(const string& date) {
    regex pattern(R"(\d{4}-\d{2}-\d{2})");
    return regex_match(date, pattern);
}

string getValidDate() {
    string date;
    while (true) {
        cout << "Enter date (YYYY-MM-DD): ";
        getline(cin, date);
        if (isValidDate(date)) return date;
        cout << "Invalid format! Please use YYYY-MM-DD.\n";
    }
}

void saveEvents(SystemData& data) {
    ofstream out("events.txt");
    for (auto& e : data.events) {
        out << e.eventID << "|" << e.name << "|" << e.date << "|" << e.venue << "|";
        for (size_t i = 0; i < e.equipment.size(); i++) {
            out << e.equipment[i];
            if (i != e.equipment.size() - 1) out << ",";
        }
        out << "\n";
    }
    out.close();
}

void loadEvents(SystemData& data) {
    ifstream in("events.txt");
    if (!in) return;

    string line;
    while (getline(in, line)) {
        Event e;
        string equipmentStr;

        stringstream ss(line);
        getline(ss, line, '|'); e.eventID = stoi(line);
        getline(ss, e.name, '|');
        getline(ss, e.date, '|');
        getline(ss, e.venue, '|');
        getline(ss, equipmentStr);

        string eq;
        stringstream eqss(equipmentStr);
        while (getline(eqss, eq, ',')) {
            if (!eq.empty()) e.equipment.push_back(eq);
        }

        data.events.push_back(e);
        if (e.eventID >= data.nextEventID) data.nextEventID = e.eventID + 1;
    }
    in.close();
}

void saveParticipants(SystemData& data) {
    ofstream out("participants.txt");
    for (auto& p : data.participants) {
        out << p.participantID << "|"
            << p.name << "|"
            << p.eventID << "|"
            << p.status << "\n";
    }
    out.close();
}

void loadParticipants(SystemData& data) {
    ifstream in("participants.txt");
    if (!in) return;

    string line;
    while (getline(in, line)) {
        Participant p;
        stringstream ss(line);
        string temp;

        getline(ss, temp, '|'); p.participantID = stoi(temp);
        getline(ss, p.name, '|');
        getline(ss, temp, '|'); p.eventID = stoi(temp);
        getline(ss, p.status);

        data.participants.push_back(p);
        if (p.participantID >= data.nextParticipantID) data.nextParticipantID = p.participantID + 1;

        if (p.status == "Present") data.attendance[p.participantID][p.eventID] = 1;
    }
    in.close();
}

// ================== Event Booking ==================
void createEvent(SystemData& data) {
    Event e;
    e.eventID = data.nextEventID++;
    cout << "(Event ID : " << e.eventID << ")\n";

    cout << "Enter event name: ";
    getline(cin, e.name);

    e.date = getValidDate();

    cout << "Enter venue: ";
    getline(cin, e.venue);

    int eqCount;
    cout << "Enter number of required equipment (0 if none): ";
    cin >> eqCount;
    cin.ignore(numeric_limits<streamsize>::max(), '\n');

    for (int i = 0; i < eqCount; i++) {
        string eq;
        cout << "  Equipment " << i + 1 << ": ";
        getline(cin, eq);
        e.equipment.push_back(eq);
    }

    data.events.push_back(e);
    cout << "Event created successfully!\n";
    saveEvents(data);
}

void retrieveEvent(SystemData& data) {
    int id;
    cout << "Enter Event ID to retrieve: ";
    cin >> id;
    cin.ignore();

    for (auto& e : data.events) {
        if (e.eventID == id) {
            cout << "\n============ Event Details ============\n";
            cout << "Event ID   : " << e.eventID << "\n";
            cout << "Name       : " << e.name << "\n";
            cout << "Date       : " << e.date << "\n";
            cout << "Venue      : " << e.venue << "\n";
            cout << "Equipment  : ";
            if (e.equipment.empty()) cout << "None";
            else {
                for (size_t i = 0; i < e.equipment.size(); i++) {
                    cout << e.equipment[i];
                    if (i != e.equipment.size() - 1) cout << ", ";
                }
            }
            cout << "\n";
            return;
        }
    }
    cout << "Event not found!\n";
}

void updateEvent(SystemData& data) {
    int id;
    cout << "Enter Event ID to update: ";
    cin >> id;
    cin.ignore();

    for (auto& e : data.events) {
        if (e.eventID == id) {
            string input;

            cout << "Enter new name (press Enter to skip): ";
            getline(cin, input);
            if (!input.empty()) e.name = input;

            cout << "Enter new date (YYYY-MM-DD, press Enter to skip): ";
            getline(cin, input);
            if (!input.empty()) {
                while (!isValidDate(input)) {
                    cout << "Invalid format! Please use YYYY-MM-DD.\n";
                    cout << "Enter new date again (or press Enter to skip): ";
                    getline(cin, input);
                    if (input.empty()) break;
                }
                if (!input.empty()) e.date = input;
            }

            cout << "Enter new venue (press Enter to skip): ";
            getline(cin, input);
            if (!input.empty()) e.venue = input;

            cout << "Update equipment? (y/n): ";
            getline(cin, input);
            if (input == "y" || input == "Y") {
                e.equipment.clear();
                int eqCount;
                cout << "Enter number of required equipment (0 if none): ";
                cin >> eqCount;
                cin.ignore();
                for (int i = 0; i < eqCount; i++) {
                    string eq;
                    cout << "  Equipment " << i + 1 << ": ";
                    getline(cin, eq);
                    e.equipment.push_back(eq);
                }
            }

            cout << "Event updated successfully!\n";
            saveEvents(data);
            return;
        }
    }
    cout << "Event not found!\n";
}

void deleteEvent(SystemData& data) {
    int id;
    cout << "Enter Event ID to delete: ";
    cin >> id;
    cin.ignore();

    for (auto it = data.events.begin(); it != data.events.end(); ++it) {
        if (it->eventID == id) {
            data.events.erase(it);
            cout << "Event deleted successfully!\n";
            saveEvents(data);
            return;
        }
    }
    cout << "Event not found!\n";
}

void viewAllEvents(SystemData& data) {
    cout << "\n============================================== All Events ===============================================\n";
    cout << left << setw(5) << "ID"
        << setw(30) << "Name"
        << setw(15) << "Date"
        << setw(25) << "Venue"
        << setw(15) << "Equipment" << "\n";
    cout << string(100, '-') << "\n";

    for (auto& e : data.events) {
        cout << left << setw(5) << e.eventID
            << setw(30) << e.name
            << setw(15) << e.date
            << setw(25) << e.venue;

        if (e.equipment.empty()) cout << "None";
        else {
            for (size_t i = 0; i < e.equipment.size(); i++) {
                cout << e.equipment[i];
                if (i != e.equipment.size() - 1) cout << ", ";
            }
        }
        cout << "\n";
    }
}

// ================== Attendance Tracker ==================
void addParticipant(SystemData& data) {
    Participant p;
    p.participantID = data.nextParticipantID++;

    cout << "Enter participant name: ";
    getline(cin, p.name);

    cout << "Enter Event ID to register: ";
    cin >> p.eventID;
    cin.ignore();

    bool found = false;
    for (auto& e : data.events) {
        if (e.eventID == p.eventID) {
            found = true;
            break;
        }
    }
    if (!found) {
        cout << "Event not found! Participant not added.\n";
        return;
    }

    p.status = "Absent";
    data.participants.push_back(p);
    data.attendance[p.participantID][p.eventID] = 0;

    cout << "Participant added successfully!\n";
    cout << "(Participant ID : " << p.participantID << ")\n";
    saveParticipants(data);
}

void markAttendance(SystemData& data) {
    int pid, eid;
    cout << "Enter Participant ID: ";
    cin >> pid;
    cout << "Enter Event ID: ";
    cin >> eid;
    cin.ignore();

    for (auto& p : data.participants) {
        if (p.participantID == pid && p.eventID == eid) {
            p.status = "Present";
            data.attendance[pid][eid] = 1;
            cout << "Attendance marked as Present!\n";
            saveParticipants(data);
            return;
        }
    }
    cout << "Invalid participant or event!\n";
}

void viewAttendanceByEvent(SystemData& data) {
    int eid;
    cout << "Enter Event ID to view attendance: ";
    cin >> eid;
    cin.ignore();

    cout << "\n========== Attendance for Event " << eid << " ==========\n";
    cout << left << setw(5) << "PID"
        << setw(20) << "Name"
        << setw(10) << "Status" << "\n";
    cout << string(40, '-') << "\n";

    for (auto& p : data.participants) {
        if (p.eventID == eid) {
            cout << left << setw(5) << p.participantID
                << setw(20) << p.name
                << setw(10) << p.status << "\n";
        }
    }
}

void viewAllParticipants(SystemData& data) {
    clearScreen();
    displayHeader("All Participants");

    if (data.participants.empty()) {
        cout << "\nNo participant found!\n";  
        pauseScreen();
        return; 
    }

    cout << left << setw(10) << "ID"
         << setw(20) << "Name"
         << setw(10) << "EventID"
         << setw(15) << "Status" << endl;
    cout << string(60, '-') << endl;

    for (const auto& p : data.participants) {
        cout << left << setw(10) << p.participantId
             << setw(20) << p.participantName
             << setw(10) << p.eventId
             << setw(15) << p.status << endl;
    }

    pauseScreen();
}

void deleteParticipant(SystemData& data) {
    clearScreen();
    displayHeader("Delete Participant");

    if (data.participants.empty()) {
        cout << "\nNo participant found!\n"; 
        pauseScreen();
        return; 
    }

    int id;
    cout << "Enter Participant ID to delete: ";
    cin >> id;

    auto it = find_if(data.participants.begin(), data.participants.end(),
        [id](const Participant& p) { return p.participantId == id; });

    if (it != data.participants.end()) {
        char confirm;
        cout << "Are you sure you want to delete participant "
             << it->participantName << " (ID: " << it->participantId << ")? (y/n): ";
        cin >> confirm;

        if (tolower(confirm) == 'y') {  
            data.participants.erase(it);
            cout << "Participant deleted successfully!\n";
            saveParticipantData(data);
        } else {
            cout << "Delete cancelled.\n"; 
        }
    } else {
        cout << "Participant not found!\n";
    }

    pauseScreen();
}


// ================== Menu ==================
void eventBookingMenu(SystemData& data) {
    int choice;
    do {
        cout << "\n========== Event Booking Menu ==========\n";
        cout << "1. Create Event\n2. Retrieve Event\n3. Update Event\n4. Delete Event\n5. View All Events\n0. Back\nChoice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1: createEvent(data); break;
        case 2: retrieveEvent(data); break;
        case 3: updateEvent(data); break;
        case 4: deleteEvent(data); break;
        case 5: viewAllEvents(data); break;
        case 0: break;
        default: cout << "Invalid choice!\n";
        }
    } while (choice != 0);
}

void attendanceTrackerMenu(SystemData& data) {
    int choice;
    do {
        cout << "\n========== Attendance Tracker Menu ==========\n";
        cout << "1. Add Participant\n";
        cout << "2. Mark Attendance\n";
        cout << "3. View Attendance by Event\n";
        cout << "4. Delete Participant\n";
        cout << "5. View All Participants\n";
        cout << "0. Back\nChoice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1: addParticipant(data); break;
        case 2: markAttendance(data); break;
        case 3: viewAttendanceByEvent(data); break;
        case 4: deleteParticipant(data); break;
        case 5: viewAllParticipants(data); break;
        case 0: break;
        default: cout << "Invalid choice!\n";
        }
    } while (choice != 0);
}


int main() {
    SystemData data;
    loadEvents(data);
    loadParticipants(data);

    int choice;
    do {
        cout << "\n========== Main Menu ==========\n";
        cout << "1. Event Booking on Dates & Logistics\n2. Attendance Tracker\n0. Exit\nChoice: ";
        cin >> choice;
        cin.ignore();

        switch (choice) {
        case 1: eventBookingMenu(data); break;
        case 2: attendanceTrackerMenu(data); break;
        case 0:
            cout << "Exiting...\n";
            saveEvents(data);
            saveParticipants(data);
            break;
        default: cout << "Invalid choice!\n";
        }
    } while (choice != 0);

    return 0;
}
